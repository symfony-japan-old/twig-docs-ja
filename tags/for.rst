``for``
=======

シーケンスの各要素を反復処理します。 例えば、``users`` という変数により与えられたユーザーのリストを
表示するには次のようにします:

.. code-block:: jinja

    <h1>Members</h1>
    <ul>
        {% for user in users %}
            <li>{{ user.username|e }}</li>
        {% endfor %}
    </ul>

.. note::

    配列もしくは、``Traversable`` インターフェースを実装したオブジェクトは、どちらも
    シーケンスとすることができます。

連続する数値を反復処理する必要があるときは、``..`` 演算子を
使用できます:

.. code-block:: jinja

    {% for i in 0..10 %}
        * {{ i }}
    {% endfor %}

上のコードでは、0 から 10 までの数字がすべて表示されます。

この演算子は、文字にも利用できます:

.. code-block:: jinja

    {% for letter in 'a'..'z' %}
        * {{ letter }}
    {% endfor %}

``..`` 演算子は、両端にどんな式でも取ることができます:

.. code-block:: jinja

    {% for letter in 'a'|upper..'z'|upper %}
        * {{ letter }}
    {% endfor %}

.. tip:

    1以外のステップの単位が必要な場合は、``range`` 関数を代わりに
    使うことができます。

`loop` 変数
-------------------

``for`` ループブロックの中では、特別な変数にアクセスできます:

===================== =============================================================
変数                  説明
===================== =============================================================
``loop.index``        ループの現在のイテレーション (1 からスタート)
``loop.index0``       ループの現在のイテレーション (0 からスタート)
``loop.revindex``     ループの最後から数えたイテレーション番号 (1 からスタート)
``loop.revindex0``    ループの最後から数えたイテレーション番号 (0 からスタート)
``loop.first``        最初のイテレーションのときにTrue
``loop.last``         最後のイテレーションのときにTrue
``loop.length``       シーケンスの要素の数
``loop.parent``       親のコンテキスト
===================== =============================================================

.. code-block:: jinja

    {% for user in users %}
        {{ loop.index }} - {{ user.username }}
    {% endfor %}

.. note::

    ``loop.length``, ``loop.revindex``, ``loop.revindex0``, 
    ``loop.last`` 変数が、PHPの配列の時か、オブジェクトで ``Countable`` インターフェースを
    実装しているときのみ使用できます。 また、条件付きのループの場合は、
    どれも使用できません。

.. versionadded:: 1.2
    Twig 1.2 より、``if`` 修飾子が追加されました。

条件の追加
------------------

PHPとは異なり、``break`` または、 ``continue`` をループの中で実行することはできません。 しかしながら、
シーケンスを反復処理中にフィルタリングすることは可能で、これにより、要素を
スキップすることができます。 次の例は、アクティブでないユーザを全てスキップするというものです:

.. code-block:: jinja

    <ul>
        {% for user in users if user.active %}
            <li>{{ user.username|e }}</li>
        {% endfor %}
    </ul>

こうすることの利点は、反復処理されないユーザーについては、カウントされないので、
loop変数が正しくカウントされるということです。 ``loop.last`` のようなプロパティは、
ループ条件を使った場合には、定義されないということを覚えておいてください。

.. note::

    条件の中で、``loop`` 変数を使用することは、推奨されません。 これは、
    おそらく、期待するようには、動作しないからです。 例えば、``loop.index > 4`` のような
    条件を追加したとしても動作しません。条件が true になっときにのみ、インデックスが加算される
    からです (ですから、この条件には、決して一致することは
    ありません)。

`else` 句
------------

シーケンスが空で、反復処理が行われない場合には、``else`` を使って、
代替のブロックをレンダリングすることができます:

.. code-block:: jinja

    <ul>
        {% for user in users %}
            <li>{{ user.username|e }}</li>
        {% else %}
            <li><em>ユーザーが見つかりませんでした</em></li>
        {% endfor %}
    </ul>

キーの反復処理
--------------

デフォルトでは、ループでは、シーケンスの値の方が繰り返し処理されます。 ``keys`` フィルタを使えば、
キーを繰り返し処理できます:

.. code-block:: jinja

    <h1>メンバー</h1>
    <ul>
        {% for key in users|keys %}
            <li>{{ key }}</li>
        {% endfor %}
    </ul>

キーと値の反復処理
------------------

キーと値の両方にアクセスすることもできます:

.. code-block:: jinja

    <h1>メンバー</h1>
    <ul>
        {% for key, user in users %}
            <li>{{ key }}: {{ user.username|e }}</li>
        {% endfor %}
    </ul>

-- 2012/08/08 goohib 843e1f74eea0ebec0d303891e683ea43f0538080
