``embed``
=========

.. versionadded:: 1.8
    ``embed`` タグは、Twig 1.8 で追加されました。

``embed`` タグは、:doc:`include<include>` と :doc:`extends<extends>` の振る舞いが
合わさったものです。
これを使うと、ちょうど、``include`` のように、別のテンプレートを埋め込むことが可能になります。
それだけでなく、テンプレートを継承したときのように、インクルードしたテンプレートで定義されているブロックを
オーバーライドすることもできます:

埋め込まれたテンプレートを "マイクロレイアウトのスケルトン" として考えてみてください。

.. code-block:: jinja

    {% embed "teasers_skeleton.twig" %}
        {# ブロックは "teasers_skeleton.twig" の中で定義されており #}
        {# ここでそれをオーバーライドします:                       #}
        {% block left_teaser %}
            左のティーザーボックスの内容
        {% endblock %}
        {% block right_teaser %}
            右のティーザーボックスの内容
        {% endblock %}
    {% endembed %}

``embed`` タグは、テンプレート継承の考えをコンテンツの断片に取り入れたもの
です。 テンプレート継承は、子テンプレートにより命が吹き込まれる "ドキュメントのスケルトン"
を可能にするものですが、``embed`` タグを使えば、
もっと小さいコンテンツの単位の "スケルトン" を作成でき、
好きな場所で、その中身を埋め、再利用することができるのです。

使用例が、いまひとつ、わかりにくいかもしれませんので、ひとつ簡単な例を見てみましょう。 
まず、ベースになるテンプレートを思い浮かべてみましょう。複数のHTMLページで共有されていて、
"content" という名前のブロックが一つ定義されているというものです:

.. code-block:: text

    ┌─── page layout ─────────────────────┐
    │                                     │
    │           ┌── block "content" ──┐   │
    │           │                     │   │
    │           │                     │   │
    │           │ (child template to  │   │
    │           │  put content here)  │   │
    │           │                     │   │
    │           │                     │   │
    │           └─────────────────────┘   │
    │                                     │
    └─────────────────────────────────────┘

さて、全部のうちのいくらかのページ ("foo" と "bar") は、どちらも同じ構造 -
2つのボックスが縦に積み重なった形になっているとしましょう:

.. code-block:: text

    ┌─── page layout ─────────────────────┐
    │                                     │
    │           ┌── block "content" ──┐   │
    │           │ ┌─ block "top" ───┐ │   │
    │           │ │                 │ │   │
    │           │ └─────────────────┘ │   │
    │           │ ┌─ block "bottom" ┐ │   │
    │           │ │                 │ │   │
    │           │ └─────────────────┘ │   │
    │           └─────────────────────┘   │
    │                                     │
    └─────────────────────────────────────┘

一方で、ほかのページ ("boom" と "baz") は、どちらも同じ構造ですが、それとは、違った構造 -
2つのボックスが横に並んだ形になっているとします:

.. code-block:: text

    ┌─── page layout ─────────────────────┐
    │                                     │
    │           ┌── block "content" ──┐   │
    │           │                     │   │    
    │           │ ┌ block ┐ ┌ block ┐ │   │
    │           │ │"left" │ │"right"│ │   │
    │           │ │       │ │       │ │   │
    │           │ │       │ │       │ │   │
    │           │ └───────┘ └───────┘ │   │
    │           └─────────────────────┘   │
    │                                     │
    └─────────────────────────────────────┘

``embed`` タグを使わずに、このテンプレートをデザインするには、方法が2つあります:

 * マスターレイアウトテンプレートから継承した、中間のベーステンプレート
   を2つ作成する: ひとつは、ページ "foo" および、"bar"で使われる、縦にボックスが積み重なった
   もので、もう一つは、ページ"boom" および、"baz" で使われる、ボックスが横に並んだもの
   になります。

 * 各ページのテンプレートに、上/下 それから、 左/右 のボックスのマークアップを
   直接埋め込む。

これら2つの解決方法は、より複雑な状況に対処できるものではありません。どちらも、大きな難点を持っているためです:

 * 最初の解決方法は、この単純な例では、うまくいくかもしれません。しかし、考えてみてください。
   サイドバーを追加しようとしていて、これが、またしても、異なるけれど繰り返しのコンテンツ構造になっている
   としましょう。すると、今度は、コンテンツの構造やサイドバーの構造…などなどの
   全部の組み合わせに対応する中間のベーステンプレートを作成する必要がある、
   ということになってしまいます。

 * 2番目の解決方法は、共通のコードをあるテンプレートから別のテンプレートへと複製しなくてはならず、
   それに関する悪影響もすべて伴います: 変更するときはいつも、構造をコピーしたもので、影響があるもの
   を全部探し出して編集することになること、それぞれのコピーごとに正確性を確かめなければならないこと、
   注意を怠って変更すれば、コピーの同期が取れなくなること等といったことです。

こういった状況では、``embed`` タグが便利です。共通のレイアウトのコードは、
単一のベースのテンプレートに置くことができ、そして、2つの異なるコンテンツの構造、
これを "マイクロレイアウト" と呼ぶことにしますが、これらは、別々のテンプレートに置かれます。
これらは、必要に応じて埋め込まれるものになります:

ページテンプレート ``foo.twig``:

.. code-block:: jinja

    {% extends "layout_skeleton.twig" %}

    {% block content %}
        {% embed "vertical_boxes_skeleton.twig" %}
            {% block top %}
                上のボックスの内容
            {% endblock %}

            {% block bottom %}
                下のボックスの内容
            {% endblock %}
        {% endembed %}
    {% endblock %}

それから、``vertical_boxes_skeleton.twig`` のコードは次のようになります:

.. code-block:: jinja

    <div class="top_box">
        {% block top %}
            上のボックスのデフォルトの内容
        {% endblock %}
    </div>

    <div class="bottom_box">
        {% block bottom %}
            下のボックスのデフォルトの内容
        {% endblock %}
    </div>

テンプレート ``vertical_boxes_skeleton.twig`` の最終目標は、ボックスのHTMLマークアップを
抽出することになります。

``embed`` タグは、``include`` タグとまったく同じ引数を取ります:

.. code-block:: jinja

    {% embed "base" with {'foo': 'bar'} %}
        ...
    {% endembed %}

    {% embed "base" with {'foo': 'bar'} only %}
        ...
    {% endembed %}

    {% embed "base" ignore missing %}
        ...
    {% endembed %}

.. warning::

    埋め込みテンプレートには "名前" がありません。自動エスケープのストラテジ（方法）は、
    テンプレートの "ファイル名"に基づいており、コンテキストが変わると、期待したとおりに動作しません
    (たとえば、CSS/JavaScript テンプレートをHTMLに埋め込む場合など)。
    その場合は、``autoescape`` タグで、デフォルトの自動エスケープのストラテジを明示的に、
    セットしてください。

.. seealso:: :doc:`include<../tags/include>`

-- 2012/08/08 goohib d13f7424eb14399b43c904f3d6f44f85e13e9880

