``embed``
=========

.. versionadded:: 1.8
    ``embed`` タグは、Twig 1.8 で追加されました。

``embed`` ステートメントを使うと、テンプレートを埋め込むことが可能になります。これは、 (``include`` 
ステートメント を使ったときのように) 外部のファイルからテンプレートをインクルードするやり方の代替手段になります:

.. code-block:: jinja

    {% embed "sidebar.twig" %}
        {% block content %}
            サイドバーのコンテンツ
        {% endblock %}
    {% endembed %}

これが、いったいどのような状況で使えるのか、理解しにくいと思いますので、
ひとつ例を挙げてみましょう。 まず、ベースになるテンプレートを思い浮かべてみます。このテンプレートは、数多くのページで共有されていて、
テンプレートには、ブロックが一つあるというものです:

.. code-block:: text

    ┌─── Page n ──────────────────────────┐
    │                                     │
    │           ┌─────────────────────┐   │
    │           │                     │   │
    │           │                     │   │
    │           │                     │   │
    │           │                     │   │
    │           │                     │   │
    │           │                     │   │
    │           └─────────────────────┘   │
    │                                     │
    └─────────────────────────────────────┘

さて、全部のうちのいくらかのページ (ページ 1, 2, ...) では、そのブロックの中は、どれも同じ構造になっているとしましょう:

.. code-block:: text

    ┌─── Page 1 & 2 ──────────────────────┐
    │                                     │
    │           ┌── Base A ───────────┐   │
    │           │ ┌── content1 ─────┐ │   │
    │           │ │ content for p1  │ │   │
    │           │ └─────────────────┘ │   │
    │           │ ┌── content2 ─────┐ │   │
    │           │ │ content for p1  │ │   │
    │           │ └─────────────────┘ │   │
    │           └─────────────────────┘   │
    │                                     │
    └─────────────────────────────────────┘

一方で、ほかのページ (ページ a, b, ...) では、ブロックの中は、それとは、違った構造になっています:

.. code-block:: text

    ┌─── Page a, b ───────────────────────┐
    │                                     │
    │           ┌── Base B ───────────┐   │
    │           │ ┌───────┐ ┌───────┐ │   │
    │           │ │       │ │       │ │   │
    │           │ │content│ │content│ │   │
    │           │ │a, ... │ │b, ... │ │   │
    │           │ │       │ │       │ │   │
    │           │ └───────┘ └───────┘ │   │
    │           └─────────────────────┘   │
    │                                     │
    └─────────────────────────────────────┘

``embed`` タグを使わずに、このテンプレートをデザインするには、方法が2つあります:

 * 2つのテンプレート (ひとつは、ページ 1, 2, ... のブロック、もう一つは、ページ a,
   b, ... のブロック) を作成します。こうして、共通のテンプレートコードを切り出します。
   そのあと、各ページのテンプレートは、ベースのテンプレートを継承したものとします。

 * 各ページに直接それぞれのページのそれぞれのコンテンツを埋め込みます。これを、
   外部のテンプレートを一切使わずに行います (全部のテンプレートで、共通のコードを繰り返し記述する必要があります)。

これら2つの解決方法は、より複雑な状況に対処できるものではありません。それぞれ、大きな難点を持っているためです:

 * 最初の解決方法では、多数の外部ファイルを作成しなくてはなりません（そしてこれらのファイルは、
   他では再利用できません）。 その結果、テンプレートを読めるように維持することができなくなります(コードや
   コンテンツの多くが、読んでいる箇所の外にある状態になります);

 * 2番目の解決方法では、共通のコードをあるテンプレートから別のテンプレートへと複製しなくてはなりません (したがって、
   "繰り返しをしない（Don't repeat yourself）" 原則に従うことができなくなります)。

こういった状況では、``embed`` タグを使えば、これらの問題が全部解決できます。共通のコードは、
ベースのテンプレートに切り出され (解決方法 1 のように)、そして、各コンテンツは、
各ページにそれぞれ記述された状態です (解決方法 2 のように):

.. code-block:: jinja

    {# ページ 1, 2, ... のテンプレート #}

    {% extends page %}

    {% block base %}
        {% embed "base_A.twig" %}
            {% block content1 %}
                ページ 2 のコンテンツ 1
            {% endblock %}

            {% block content2 %}
                ページ 2 のコンテンツ 2
            {% endblock %}
        {% endembed %}
    {% endblock %}

それから、``base_A.twig`` のコードは次のようになります:

.. code-block:: jinja

    ここにコード

    {% block content1 %}
        Some default content
    {% endblock %}

    ここに別のコード

    {% block content2 %}
        Some default content
    {% endblock %}

    さらに別のコード

ベーステンプレート ``base_A.twig`` の最終目標は、``ここにコード``, ``ここに別のコード``, ``さらに別のコード`` 
と書かれた部分を切り出すことになります。

``embed`` タグは、``include`` タグとまったく同じ引数を取ります:

.. code-block:: jinja

    {% embed "base" with {'foo': 'bar'} %}
        ...
    {% endembed %}

    {% embed "base" with {'foo': 'bar'} only %}
        ...
    {% endembed %}

    {% embed "base" ignore missing %}
        ...
    {% endembed %}

.. warning::

    埋め込みテンプレートには "名前" がありません。自動エスケープのストラテジ（方法）は、
    テンプレートの "ファイル名"に基づいており、コンテキストが変わると、期待したとおりに動作しません
    (たとえば、CSS/JavaScript テンプレートをHTMLに埋め込む場合など)。
    その場合は、``autoescape`` タグで、デフォルトの自動エスケープのストラテジを明示的に、
    セットしてください。

.. seealso:: :doc:`include<../tags/include>`
